[tool.poetry]
name = "odfdo"
version = "3.4.4"
description = "Python library for OpenDocument Format"
license = "Apache-2.0"
keywords = ["python", "library", "ODF", "OpenDocument"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules"]
homepage = "https://github.com/jdum/odfdo"
repository = "https://github.com/jdum/odfdo"
authors = ["Jérôme Dumonteil <jerome.dumonteil@gmail.com>"]
readme = "README.md"
packages = [{ include = "odfdo" }]

[tool.poetry.dependencies]
python = ">=3.9,<4"
lxml = "^4.0"

[tool.poetry.group.docs.dependencies]
pdoc3 = ">=0.10"

[tool.poetry.group.dev.dependencies]
poetry = ">=1.6"
pytest = ">=7.0"
tox = "^4"
Pillow = ">=10.0.0"

[tool.poetry.scripts]
odfdo-diff = "odfdo.scripts.diff:main"
odfdo-folder = 'odfdo.scripts.folder:main'
odfdo-show = 'odfdo.scripts.show:main'
odfdo-styles = 'odfdo.scripts.styles:main'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"

[tool.ruff]
target-version = "py312"
line-length = 88
fix = false
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Use specific rule codes when ignoring type issues
    "PGH003",
    # check for execution of untrusted input
    "S603",
    # Class attribute `open` is shadowing a Python builtin
    "A003",
    # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    "UP038",
    # Avoid specifying long messages outside the exception class
    "TRY003",
    # Use ternary operator
    "SIM108",
    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S311",
    # Use `X | Y` for type annotations
    "UP007",
]

[tool.ruff.per-file-ignores]
"recipes/accessing_a_single_element.py" = ["RUF001"]
"tests/test_*" = ["S101"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["odfdo"]
